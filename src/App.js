// import logo from './logo.svg';
import './App.css';
import Header from './components/Header/Header';
import Footer from './components/Footer/Footer';
import Navbar from './components/Navbar/Navbar';
// import PersonalInfo from './components/PersonalInfo/PersonalInfo';
// import AddressInfo from './components/AddressInfo/AddressInfo';
// import Confirmation from './components/Confirmation/Confirmation';
import StepDisplay from './components/StepDisplay/StepDisplay';
import { useState,useEffect } from 'react';
import FormContent from './components/FormContent/FormContent';





function App() {
  const [currStep,setCurrStep]=useState(1);

  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    address1: '',
    address2: '',
    city: '',
    state: '',
    zip: '',

  });
  const [errors, setErrors] = useState({});

  const [isInitialLoad, setIsInitialLoad] = useState(true);

  // useEffect(() => {
  //   // Load the data from localStorage when the component mounts
  //   const savedData = JSON.parse(localStorage.getItem('formData'));
  //   if (savedData) {
  //     setFormData(savedData);
  //   }
  
  //   // Save formData to localStorage whenever it changes
  //   if (formData !== savedData) { 
  //     localStorage.setItem('formData', JSON.stringify(formData));
  //     console.log("Saving to localStorage:", formData);
  //   }
  // }, [formData]);

  useEffect(() => {
   
    const savedData = JSON.parse(localStorage.getItem('formData'));
    console.log(savedData)
    if (savedData) {
      console.log("Loaded from localStorage:", savedData);
      setIsInitialLoad(false);
      setFormData(savedData);
    }
    
    console.log(savedData)
   
  }, []);

  useEffect(() => {
    if(!isInitialLoad){
      console.log("Saving to localStorage:", formData);
    localStorage.setItem('formData', JSON.stringify(formData));
    }
      
    
    
  }, [formData,isInitialLoad]);

  const handleForm=({name, value})=>{
    setFormData((prev) => ({ ...prev, [name]: value }));
  }

  const validateStep = (step) => {
    let tempErrors = {};
    if (step === 1) {
      if (!formData.name) tempErrors.name = 'Name is required';
      if (!/^[a-zA-Z]+$/.test(formData.name))  tempErrors.name = "Name can only contain alphabets";
      if (!formData.email) tempErrors.email = 'Email is required';
      if (!/\S+@\S+\.\S+/.test(formData.email)) tempErrors.email = "Email is invalid";
      if (!formData.phone) tempErrors.phone = 'Phone is required';
      if (!(formData.phone.length===10)) tempErrors.phone = 'Phone number should be less than 10 digits';
      if (!/^\d+$/.test(formData.phone)) tempErrors.phone = "Phone number is invalid";
    } else if (step === 2) {
      if (!formData.address1) tempErrors.address1 = 'Address Line 1 is required';
      if (!formData.city) tempErrors.city = 'City is required';
      if (!formData.state) tempErrors.state = 'State is required';
      if (!formData.zip) tempErrors.zip = 'Zip Code is required';
      if (!(formData.zip.length===6)) tempErrors.zip = 'Zip code should have 6 digits';
      if (!/^\d+$/.test(formData.zip)) tempErrors.zip = "Zip code is invalid";

    }
    setErrors(tempErrors);
    return Object.keys(tempErrors).length === 0;
  };

  const forward = () => {
    if (validateStep(currStep)) {
    if (currStep < 3) {
      setCurrStep(currStep + 1);
    }
  }
  else{
    alert("Please correct the mentioned errors");
  }
  }

  const backward = () => {
    if (currStep > 1) {
      setCurrStep(currStep - 1);
    }
  }
  
  
 /* Delivered code generated by Create New App
 return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );*/

  //Code for the Multistep Form

  return(
  
  <div>
    <Header/>
    
    <StepDisplay currStep={currStep}/>
    <FormContent currStep={currStep}  formData={formData} handleForm={handleForm} errors={errors}  />
    <Navbar currStep={currStep} forward={forward} backward={backward}/>
    <Footer/>
  </div>
  );

}

export default App;
